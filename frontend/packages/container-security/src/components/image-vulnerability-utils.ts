import * as _ from 'lodash';
import { RowFilter } from '@console/internal/components/filter-toolbar';
import { Priority } from '../const';
import { Vulnerability } from '../types';

export enum VulnerabilitiesType {
  allVulnerabilities = 'All vulnerabilities',
  appDependency = 'App dependency',
  baseImage = 'Base image',
}

const vulnerabilityMetadata = (vulnerability: Vulnerability) => {
  return vulnerability.metadata ? JSON.parse(vulnerability.metadata) : vulnerability.metadata;
};

export const getVulnerabilityType = (vulnerability: Vulnerability) => {
  const metadata = vulnerabilityMetadata(vulnerability);
  return ['pypi', 'maven', 'npm'].includes(metadata?.RepoName)
    ? VulnerabilitiesType.appDependency
    : VulnerabilitiesType.baseImage;
};

export const getVulnerabilitySource = (vulnerability: Vulnerability) => {
  const metadata = vulnerabilityMetadata(vulnerability);
  return metadata?.UpdatedBy === 'CodeReadyAnalytics' ? 'CodeReadyAnalytics' : 'Quay Clair';
};

export const getFixableVulnerabilitiesCount = (vulnerabilities: Vulnerability[]) => {
  return _.filter(
    vulnerabilities,
    (vulnerability) => vulnerability.fixedby !== null || vulnerability.fixedby !== '',
  ).length;
};

export const imageVulnerabilitiesRowFilters: RowFilter[] = [
  {
    filterGroupName: 'Type',
    items: [
      { id: VulnerabilitiesType.appDependency, title: VulnerabilitiesType.appDependency },
      { id: VulnerabilitiesType.baseImage, title: VulnerabilitiesType.baseImage },
    ],
    type: 'vulnerability-type',
    reducer: (v) => getVulnerabilityType(v.vulnerability),
    filter: (filter, vuln) =>
      filter.selected.has(getVulnerabilityType(vuln.vulnerability)) || _.isEmpty(filter.selected),
  },
  {
    filterGroupName: 'Severity',
    items: [
      { id: Priority.Defcon1, title: Priority.Defcon1 },
      { id: Priority.Critical, title: Priority.Critical },
      { id: Priority.High, title: Priority.High },
      { id: Priority.Medium, title: Priority.Medium },
      { id: Priority.Low, title: Priority.Low },
      { id: Priority.Negligible, title: Priority.Negligible },
      { id: Priority.Unknown, title: Priority.Unknown },
    ],
    type: 'vulnerability-severity',
    reducer: (v) => v.vulnerability.severity,
    filter: (filter, vuln) =>
      filter.selected.has(vuln.vulnerability.severity) || _.isEmpty(filter.selected),
  },
];
